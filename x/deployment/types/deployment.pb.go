// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/deployment.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ovrclk_akash_x_deployment_types "github.com/ovrclk/akash/x/deployment/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DeploymentID stores owner and sequence number
type DeploymentID struct {
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner" yaml:"owner"`
	DSeq  uint64                                        `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
}

func (m *DeploymentID) Reset()      { *m = DeploymentID{} }
func (*DeploymentID) ProtoMessage() {}
func (*DeploymentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa46316c88021b3, []int{0}
}
func (m *DeploymentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentID.Merge(m, src)
}
func (m *DeploymentID) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentID.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentID proto.InternalMessageInfo

func (m *DeploymentID) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DeploymentID) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

// Deployment stores deploymentID, state and version details
type Deployment struct {
	DeploymentID DeploymentID                                               `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"id" yaml:"id"`
	State        github_com_ovrclk_akash_x_deployment_types.DeploymentState `protobuf:"varint,2,opt,name=state,proto3,casttype=github.com/ovrclk/akash/x/deployment/types.DeploymentState" json:"state" yaml:"state"`
	Version      [][]byte                                                   `protobuf:"bytes,3,rep,name=version,proto3" json:"version" yaml:"version"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa46316c88021b3, []int{1}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(m, src)
}
func (m *Deployment) XXX_Size() int {
	return m.Size()
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetDeploymentID() DeploymentID {
	if m != nil {
		return m.DeploymentID
	}
	return DeploymentID{}
}

func (m *Deployment) GetState() github_com_ovrclk_akash_x_deployment_types.DeploymentState {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Deployment) GetVersion() [][]byte {
	if m != nil {
		return m.Version
	}
	return nil
}

type DeploymentResponse struct {
	Deployment Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment" yaml:"deployment"`
	Groups     []Group    `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups" yaml:"groups"`
}

func (m *DeploymentResponse) Reset()      { *m = DeploymentResponse{} }
func (*DeploymentResponse) ProtoMessage() {}
func (*DeploymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa46316c88021b3, []int{2}
}
func (m *DeploymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentResponse.Merge(m, src)
}
func (m *DeploymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentResponse proto.InternalMessageInfo

func (m *DeploymentResponse) GetDeployment() Deployment {
	if m != nil {
		return m.Deployment
	}
	return Deployment{}
}

func (m *DeploymentResponse) GetGroups() []Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*DeploymentID)(nil), "akash.deployment.DeploymentID")
	proto.RegisterType((*Deployment)(nil), "akash.deployment.Deployment")
	proto.RegisterType((*DeploymentResponse)(nil), "akash.deployment.DeploymentResponse")
}

func init() { proto.RegisterFile("akash/deployment/deployment.proto", fileDescriptor_6fa46316c88021b3) }

var fileDescriptor_6fa46316c88021b3 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xf5, 0x25, 0x69, 0x81, 0x4b, 0x82, 0xe0, 0x84, 0x44, 0x54, 0x15, 0x7f, 0xe1, 0x16, 0x22,
	0xa4, 0xda, 0x52, 0x3b, 0x20, 0x65, 0xab, 0x15, 0x09, 0x95, 0x09, 0xb9, 0x03, 0x12, 0x0b, 0xa4,
	0xbe, 0x53, 0x6a, 0x25, 0xce, 0xb9, 0x3e, 0xb7, 0x90, 0x7f, 0xc1, 0xc8, 0xd8, 0x91, 0x8d, 0xbf,
	0xd1, 0xb1, 0x1b, 0x4c, 0x27, 0xe4, 0x2c, 0xc8, 0xa3, 0x47, 0x26, 0xe4, 0x3b, 0x37, 0x36, 0x54,
	0x42, 0x4c, 0xbe, 0xef, 0xbd, 0xef, 0xde, 0xbd, 0x7b, 0xdf, 0x19, 0x3f, 0x9d, 0xce, 0xa7, 0xf2,
	0xd4, 0x65, 0x3c, 0x5e, 0x88, 0x55, 0xc4, 0x97, 0x69, 0x63, 0xe9, 0xc4, 0x89, 0x48, 0x05, 0x79,
	0xa0, 0x5b, 0x9c, 0x1a, 0xdf, 0x79, 0x34, 0x13, 0x33, 0xa1, 0x49, 0xb7, 0x5c, 0x99, 0xbe, 0x9d,
	0xdd, 0x5b, 0x52, 0xb3, 0x44, 0x9c, 0xc7, 0x86, 0xa5, 0x5f, 0x11, 0xee, 0x4d, 0x36, 0xd4, 0xd1,
	0x84, 0xbc, 0xc7, 0x5b, 0xe2, 0xc3, 0x92, 0x27, 0x03, 0x34, 0x44, 0xa3, 0x9e, 0xf7, 0x2a, 0x57,
	0x60, 0x80, 0x42, 0x41, 0x6f, 0x35, 0x8d, 0x16, 0x63, 0xaa, 0x4b, 0xfa, 0x4b, 0xc1, 0xde, 0x2c,
	0x4c, 0x4f, 0xcf, 0x4f, 0x9c, 0x40, 0x44, 0x6e, 0x20, 0x64, 0x24, 0x64, 0xf5, 0xd9, 0x93, 0x6c,
	0xee, 0xa6, 0xab, 0x98, 0x4b, 0xe7, 0x30, 0x08, 0x0e, 0x19, 0x4b, 0xb8, 0x94, 0xbe, 0xd1, 0x21,
	0x07, 0xb8, 0xc3, 0x24, 0x3f, 0x1b, 0xb4, 0x86, 0x68, 0xd4, 0xf1, 0x20, 0x53, 0xd0, 0x99, 0x1c,
	0xf3, 0xb3, 0x5c, 0x81, 0xc6, 0x0b, 0x05, 0x5d, 0x73, 0x4e, 0x59, 0x51, 0x5f, 0x83, 0xe3, 0xbb,
	0x9f, 0x2f, 0xc1, 0xfa, 0x79, 0x09, 0x88, 0x7e, 0x69, 0x61, 0x5c, 0x3b, 0x26, 0x0b, 0xdc, 0xaf,
	0xaf, 0xf6, 0x2e, 0x64, 0xda, 0x77, 0x77, 0xdf, 0x76, 0xfe, 0x8e, 0xc7, 0x69, 0x5e, 0xd3, 0x7b,
	0x76, 0xa5, 0xc0, 0xca, 0x14, 0xfc, 0x71, 0xf9, 0x5c, 0x41, 0x2b, 0x64, 0x85, 0x82, 0x7b, 0xc6,
	0x40, 0xc8, 0xa8, 0xdf, 0xab, 0x15, 0x8e, 0x18, 0x89, 0xf0, 0x96, 0x4c, 0xa7, 0x29, 0xd7, 0xe6,
	0xfb, 0xde, 0x9b, 0x32, 0x1d, 0x0d, 0xd4, 0xe9, 0xe8, 0xb2, 0x4c, 0x67, 0xdc, 0x48, 0x47, 0x5c,
	0x24, 0xc1, 0x62, 0xee, 0x9a, 0x51, 0x7c, 0x6c, 0x0e, 0xc3, 0xa4, 0x54, 0xbb, 0x38, 0x2e, 0xb7,
	0xfb, 0x46, 0x94, 0xbc, 0xc0, 0x77, 0x2e, 0x78, 0x22, 0x43, 0xb1, 0x1c, 0xb4, 0x87, 0xed, 0x51,
	0xcf, 0x7b, 0x92, 0x2b, 0xb8, 0x81, 0x0a, 0x05, 0xf7, 0xcd, 0x91, 0x15, 0x40, 0xfd, 0x1b, 0x6a,
	0xdc, 0xd1, 0x51, 0x7d, 0x43, 0x98, 0xd4, 0xca, 0x3e, 0x97, 0xb1, 0x58, 0x4a, 0x4e, 0x38, 0xc6,
	0xb5, 0x81, 0x2a, 0xaf, 0xdd, 0x7f, 0xe5, 0x65, 0xd2, 0xca, 0x15, 0x34, 0xf6, 0x15, 0x0a, 0x1e,
	0x56, 0x63, 0xda, 0x60, 0xd4, 0x6f, 0x34, 0x90, 0xd7, 0x78, 0x5b, 0xbf, 0x34, 0x39, 0x68, 0x0d,
	0xdb, 0xa3, 0xee, 0xfe, 0xe3, 0xdb, 0x47, 0xbc, 0x2c, 0x79, 0x0f, 0x2a, 0xf5, 0xaa, 0xbd, 0x50,
	0xd0, 0x37, 0xca, 0xa6, 0xa6, 0x7e, 0x45, 0x6c, 0x1e, 0x81, 0xe5, 0x4d, 0xae, 0x32, 0x1b, 0x5d,
	0x67, 0x36, 0xfa, 0x91, 0xd9, 0xe8, 0xd3, 0xda, 0xb6, 0xae, 0xd7, 0xb6, 0xf5, 0x7d, 0x6d, 0x5b,
	0x6f, 0x9f, 0xff, 0x7f, 0xea, 0x27, 0xdb, 0xfa, 0x1f, 0x38, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0xfa, 0x20, 0x32, 0x6e, 0x03, 0x00, 0x00,
}

func (this *DeploymentID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentID)
	if !ok {
		that2, ok := that.(DeploymentID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if this.DSeq != that1.DSeq {
		return false
	}
	return true
}
func (this *Deployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Deployment)
	if !ok {
		that2, ok := that.(Deployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeploymentID.Equal(&that1.DeploymentID) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Version) != len(that1.Version) {
		return false
	}
	for i := range this.Version {
		if !bytes.Equal(this.Version[i], that1.Version[i]) {
			return false
		}
	}
	return true
}
func (m *DeploymentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DSeq != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDeployment(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		for iNdEx := len(m.Version) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Version[iNdEx])
			copy(dAtA[i:], m.Version[iNdEx])
			i = encodeVarintDeployment(dAtA, i, uint64(len(m.Version[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.State != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.DeploymentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeployment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeploymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeployment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Deployment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeployment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDeployment(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeployment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeploymentID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovDeployment(uint64(m.DSeq))
	}
	return n
}

func (m *Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DeploymentID.Size()
	n += 1 + l + sovDeployment(uint64(l))
	if m.State != 0 {
		n += 1 + sovDeployment(uint64(m.State))
	}
	if len(m.Version) > 0 {
		for _, b := range m.Version {
			l = len(b)
			n += 1 + l + sovDeployment(uint64(l))
		}
	}
	return n
}

func (m *DeploymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deployment.Size()
	n += 1 + l + sovDeployment(uint64(l))
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovDeployment(uint64(l))
		}
	}
	return n
}

func sovDeployment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeployment(x uint64) (n int) {
	return sovDeployment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeploymentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeploymentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= github_com_ovrclk_akash_x_deployment_types.DeploymentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version, make([]byte, postIndex-iNdEx))
			copy(m.Version[len(m.Version)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deployment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeployment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeployment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeployment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeployment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeployment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeployment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeployment = fmt.Errorf("proto: unexpected end of group")
)

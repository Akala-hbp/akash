// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/market/bid.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bid_State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	BidStateDefault Bid_State = 0
	BidOpen         Bid_State = 1
	BidMatched      Bid_State = 2
	BidLost         Bid_State = 3
	BidClosed       Bid_State = 4
)

var Bid_State_name = map[int32]string{
	0: "all",
	1: "open",
	2: "matched",
	3: "lost",
	4: "closed",
}

var Bid_State_value = map[string]int32{
	"all":     0,
	"open":    1,
	"matched": 2,
	"lost":    3,
	"closed":  4,
}

func (x Bid_State) String() string {
	return proto.EnumName(Bid_State_name, int32(x))
}

func (Bid_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{3, 0}
}

// MsgCreateBid defines an SDK message for creating Bid
type MsgCreateBid struct {
	Order    OrderID                                       `protobuf:"bytes,1,opt,name=order,proto3" json:"order" yaml:"order"`
	Provider github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=provider,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"provider" yaml:"provider"`
	Price    types.Coin                                    `protobuf:"bytes,3,opt,name=price,proto3" json:"price" yaml:"price"`
}

func (m *MsgCreateBid) Reset()         { *m = MsgCreateBid{} }
func (m *MsgCreateBid) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBid) ProtoMessage()    {}
func (*MsgCreateBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{0}
}
func (m *MsgCreateBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBid.Merge(m, src)
}
func (m *MsgCreateBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBid proto.InternalMessageInfo

func (m *MsgCreateBid) GetOrder() OrderID {
	if m != nil {
		return m.Order
	}
	return OrderID{}
}

func (m *MsgCreateBid) GetProvider() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *MsgCreateBid) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

// MsgCloseBid defines an SDK message for closing bid
type MsgCloseBid struct {
	BidID BidID `protobuf:"bytes,1,opt,name=bid_id,json=bidId,proto3" json:"id" yaml:"id"`
}

func (m *MsgCloseBid) Reset()         { *m = MsgCloseBid{} }
func (m *MsgCloseBid) String() string { return proto.CompactTextString(m) }
func (*MsgCloseBid) ProtoMessage()    {}
func (*MsgCloseBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{1}
}
func (m *MsgCloseBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseBid.Merge(m, src)
}
func (m *MsgCloseBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseBid proto.InternalMessageInfo

func (m *MsgCloseBid) GetBidID() BidID {
	if m != nil {
		return m.BidID
	}
	return BidID{}
}

// BidID stores owner and all other seq numbers
// A successful bid becomes a Lease(ID).
type BidID struct {
	Owner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner" yaml:"owner"`
	DSeq     uint64                                        `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
	GSeq     uint32                                        `protobuf:"varint,3,opt,name=gseq,proto3" json:"gseq" yaml:"gseq"`
	OSeq     uint32                                        `protobuf:"varint,4,opt,name=oseq,proto3" json:"oseq" yaml:"oseq"`
	Provider github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=provider,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"provider" yaml:"provider"`
}

func (m *BidID) Reset()      { *m = BidID{} }
func (*BidID) ProtoMessage() {}
func (*BidID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{2}
}
func (m *BidID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidID.Merge(m, src)
}
func (m *BidID) XXX_Size() int {
	return m.Size()
}
func (m *BidID) XXX_DiscardUnknown() {
	xxx_messageInfo_BidID.DiscardUnknown(m)
}

var xxx_messageInfo_BidID proto.InternalMessageInfo

func (m *BidID) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *BidID) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

func (m *BidID) GetGSeq() uint32 {
	if m != nil {
		return m.GSeq
	}
	return 0
}

func (m *BidID) GetOSeq() uint32 {
	if m != nil {
		return m.OSeq
	}
	return 0
}

func (m *BidID) GetProvider() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Provider
	}
	return nil
}

// Bid stores BidID, state of bid and price
type Bid struct {
	BidID BidID      `protobuf:"bytes,1,opt,name=bid_id,json=bidId,proto3" json:"id" yaml:"id"`
	State Bid_State  `protobuf:"varint,2,opt,name=state,proto3,enum=akash.market.Bid_State" json:"state" yaml:"state"`
	Price types.Coin `protobuf:"bytes,3,opt,name=price,proto3" json:"price" yaml:"price"`
}

func (m *Bid) Reset()      { *m = Bid{} }
func (*Bid) ProtoMessage() {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{3}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetBidID() BidID {
	if m != nil {
		return m.BidID
	}
	return BidID{}
}

func (m *Bid) GetState() Bid_State {
	if m != nil {
		return m.State
	}
	return BidStateDefault
}

func (m *Bid) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

// BidFilters defines flags for bid list filter
type BidFilters struct {
	Owner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner" yaml:"owner"`
	DSeq     uint64                                        `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
	GSeq     uint32                                        `protobuf:"varint,3,opt,name=gseq,proto3" json:"gseq" yaml:"gseq"`
	OSeq     uint32                                        `protobuf:"varint,4,opt,name=oseq,proto3" json:"oseq" yaml:"oseq"`
	Provider github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=provider,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"provider" yaml:"provider"`
	State    Bid_State                                     `protobuf:"varint,6,opt,name=state,proto3,casttype=Bid_State" json:"state" yaml:"state"`
}

func (m *BidFilters) Reset()         { *m = BidFilters{} }
func (m *BidFilters) String() string { return proto.CompactTextString(m) }
func (*BidFilters) ProtoMessage()    {}
func (*BidFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1ec50986797561e, []int{4}
}
func (m *BidFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidFilters.Merge(m, src)
}
func (m *BidFilters) XXX_Size() int {
	return m.Size()
}
func (m *BidFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_BidFilters.DiscardUnknown(m)
}

var xxx_messageInfo_BidFilters proto.InternalMessageInfo

func (m *BidFilters) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *BidFilters) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

func (m *BidFilters) GetGSeq() uint32 {
	if m != nil {
		return m.GSeq
	}
	return 0
}

func (m *BidFilters) GetOSeq() uint32 {
	if m != nil {
		return m.OSeq
	}
	return 0
}

func (m *BidFilters) GetProvider() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *BidFilters) GetState() Bid_State {
	if m != nil {
		return m.State
	}
	return 0
}

func init() {
	proto.RegisterEnum("akash.market.Bid_State", Bid_State_name, Bid_State_value)
	proto.RegisterType((*MsgCreateBid)(nil), "akash.market.MsgCreateBid")
	proto.RegisterType((*MsgCloseBid)(nil), "akash.market.MsgCloseBid")
	proto.RegisterType((*BidID)(nil), "akash.market.BidID")
	proto.RegisterType((*Bid)(nil), "akash.market.Bid")
	proto.RegisterType((*BidFilters)(nil), "akash.market.BidFilters")
}

func init() { proto.RegisterFile("akash/market/bid.proto", fileDescriptor_c1ec50986797561e) }

var fileDescriptor_c1ec50986797561e = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xb1, 0x4f, 0xdb, 0x40,
	0x14, 0xc6, 0xed, 0xc4, 0x0e, 0x70, 0x09, 0x10, 0x99, 0xd2, 0x42, 0xda, 0xe6, 0x2c, 0x0f, 0x88,
	0x05, 0x47, 0x82, 0x0d, 0x75, 0x28, 0x47, 0xd4, 0x96, 0x0a, 0x44, 0x15, 0xb6, 0x2e, 0xd4, 0xf1,
	0x5d, 0xcd, 0x29, 0x4e, 0x2e, 0xf8, 0x0c, 0x2d, 0x5b, 0xc7, 0x2a, 0x53, 0xbb, 0x55, 0x95, 0x22,
	0x21, 0xf5, 0x0f, 0xe9, 0xca, 0xc8, 0xd8, 0xc9, 0xaa, 0xc2, 0x82, 0x32, 0x66, 0x64, 0xa8, 0xaa,
	0xbb, 0x73, 0x02, 0x51, 0xd5, 0xa5, 0xa2, 0x9d, 0x3a, 0x39, 0xef, 0xbb, 0xfb, 0xdd, 0x7b, 0xfe,
	0xde, 0xbb, 0x18, 0xdc, 0xf5, 0x1a, 0x1e, 0x3f, 0xa8, 0x34, 0xbd, 0xa8, 0x41, 0xe2, 0x4a, 0x9d,
	0x62, 0xb7, 0x1d, 0xb1, 0x98, 0x59, 0x05, 0xa9, 0xbb, 0x4a, 0x2f, 0xdd, 0x09, 0x58, 0xc0, 0xe4,
	0x42, 0x45, 0xfc, 0x52, 0x7b, 0x4a, 0x0b, 0x63, 0x2c, 0x8b, 0x30, 0x89, 0xd2, 0x95, 0x39, 0x9f,
	0xf1, 0x26, 0xe3, 0x15, 0xf5, 0x50, 0xa2, 0xf3, 0x39, 0x03, 0x0a, 0x3b, 0x3c, 0xd8, 0x8c, 0x88,
	0x17, 0x13, 0x44, 0xb1, 0xb5, 0x07, 0x4c, 0x09, 0x2d, 0xe8, 0xb6, 0xbe, 0x9c, 0x5f, 0x9d, 0x77,
	0x6f, 0xe6, 0x74, 0x77, 0xc5, 0xd2, 0x56, 0x15, 0x2d, 0x9d, 0x25, 0x50, 0xeb, 0x25, 0xd0, 0x94,
	0x42, 0x3f, 0x81, 0x0a, 0x1a, 0x24, 0xb0, 0x70, 0xe2, 0x35, 0xc3, 0x75, 0x47, 0x86, 0x4e, 0x4d,
	0xc9, 0x56, 0x08, 0x26, 0xdb, 0x11, 0x3b, 0xa6, 0xe2, 0xdc, 0x8c, 0xad, 0x2f, 0x17, 0xd0, 0x8b,
	0x7e, 0x02, 0x47, 0xda, 0x20, 0x81, 0xb3, 0x0a, 0x1b, 0x2a, 0xce, 0x55, 0x02, 0x57, 0x02, 0x1a,
	0x1f, 0x1c, 0xd5, 0x5d, 0x9f, 0x35, 0x2b, 0x63, 0xa5, 0xaf, 0x70, 0xdc, 0xa8, 0xc4, 0x27, 0x6d,
	0xc2, 0xdd, 0x0d, 0xdf, 0xdf, 0xc0, 0x38, 0x22, 0x9c, 0xd7, 0x46, 0xa7, 0x59, 0x1b, 0xc0, 0x6c,
	0x47, 0xd4, 0x27, 0x0b, 0x59, 0xf9, 0x0a, 0x05, 0x37, 0x7d, 0xe3, 0x4d, 0x46, 0x5b, 0xe8, 0xa1,
	0xa8, 0x5c, 0x14, 0x2c, 0xb7, 0x5c, 0x17, 0x2c, 0x43, 0xa7, 0xa6, 0xe4, 0x75, 0xe3, 0xf2, 0x14,
	0x6a, 0x8e, 0x07, 0xf2, 0xc2, 0x9b, 0x90, 0x71, 0x69, 0xcd, 0x36, 0xc8, 0xd5, 0x29, 0xde, 0xa7,
	0x38, 0xf5, 0x66, 0x6e, 0xdc, 0x1b, 0x44, 0xf1, 0x56, 0x15, 0xd9, 0x43, 0x67, 0x64, 0xd8, 0x4f,
	0x60, 0x86, 0xe2, 0x41, 0x02, 0xa7, 0x54, 0x16, 0x8a, 0x9d, 0x9a, 0x59, 0xa7, 0x78, 0x0b, 0xa7,
	0x29, 0xde, 0x65, 0x81, 0xda, 0x69, 0xbd, 0x02, 0x26, 0x7b, 0xd3, 0x4a, 0x8d, 0x2f, 0xa0, 0xe7,
	0xd2, 0x54, 0x21, 0xdc, 0x30, 0x55, 0x84, 0x7f, 0x60, 0x8d, 0x3a, 0xc7, 0x5a, 0x03, 0x06, 0xe6,
	0xe4, 0x50, 0x76, 0xc0, 0x40, 0xb0, 0x97, 0x40, 0xa3, 0xba, 0x47, 0x0e, 0xfb, 0x09, 0x94, 0xfa,
	0x20, 0x81, 0x79, 0x95, 0x47, 0x44, 0x4e, 0x4d, 0x8a, 0x02, 0x0a, 0x04, 0x24, 0xbc, 0x9c, 0x56,
	0xd0, 0xd3, 0x14, 0x0a, 0xc6, 0xa0, 0x40, 0x41, 0x41, 0x0a, 0x31, 0x01, 0x19, 0xd7, 0xd0, 0x6e,
	0x0a, 0xb1, 0x31, 0x88, 0x29, 0x48, 0x3c, 0xc6, 0x86, 0xc4, 0xfc, 0xdb, 0x43, 0xb2, 0x3e, 0xf9,
	0xe9, 0x14, 0x6a, 0x97, 0xa7, 0x50, 0x77, 0x7e, 0x64, 0x40, 0xf6, 0xd6, 0xdb, 0x6b, 0x3d, 0x03,
	0x26, 0x8f, 0xbd, 0x98, 0x48, 0xb7, 0x67, 0x56, 0xef, 0xfd, 0x72, 0x98, 0xbb, 0x27, 0x96, 0xd1,
	0xa2, 0xe8, 0xb3, 0xdc, 0x79, 0xdd, 0x67, 0x19, 0x3a, 0x35, 0x25, 0xdf, 0xc2, 0x38, 0x3b, 0x1f,
	0x75, 0x60, 0xca, 0x74, 0xd6, 0x03, 0x90, 0xf5, 0xc2, 0xb0, 0xa8, 0x95, 0xe6, 0x3a, 0x5d, 0x7b,
	0x16, 0x51, 0x2c, 0xe5, 0x2a, 0x79, 0xed, 0x1d, 0x85, 0xb1, 0x35, 0x0f, 0x0c, 0xd6, 0x26, 0xad,
	0xa2, 0x5e, 0xca, 0x77, 0xba, 0xf6, 0x04, 0xa2, 0x78, 0xb7, 0x4d, 0x5a, 0xd6, 0x7d, 0x30, 0xd1,
	0xf4, 0x62, 0xff, 0x80, 0xe0, 0x62, 0xa6, 0x34, 0xd3, 0xe9, 0xda, 0x00, 0x51, 0xbc, 0xa3, 0x14,
	0xc1, 0x84, 0x8c, 0xc7, 0xc5, 0xec, 0x88, 0xd9, 0x66, 0x3c, 0xb6, 0x16, 0x41, 0xce, 0x17, 0x17,
	0x07, 0x17, 0x8d, 0xd2, 0x74, 0xa7, 0x6b, 0x4f, 0x21, 0x8a, 0xe5, 0x4d, 0xc2, 0x25, 0xe3, 0xfd,
	0x97, 0xb2, 0x36, 0x6a, 0x80, 0xe6, 0x7c, 0xcd, 0x02, 0x71, 0xe0, 0x13, 0x1a, 0xc6, 0x24, 0xe2,
	0xff, 0x2f, 0xc2, 0x3f, 0xbd, 0x08, 0xd6, 0xa3, 0xe1, 0xa0, 0xe6, 0x6c, 0x7d, 0xd9, 0x44, 0x4b,
	0xbf, 0x9d, 0xc7, 0xab, 0x04, 0x8a, 0x26, 0xee, 0xcb, 0x89, 0x49, 0x87, 0x53, 0xfd, 0x8b, 0xa1,
	0xc7, 0x67, 0xbd, 0xb2, 0x7e, 0xde, 0x2b, 0xeb, 0xdf, 0x7b, 0x65, 0xfd, 0xc3, 0x45, 0x59, 0x3b,
	0xbf, 0x28, 0x6b, 0xdf, 0x2e, 0xca, 0xda, 0xcb, 0xa5, 0x1b, 0x65, 0xb1, 0xe3, 0xc8, 0x0f, 0x1b,
	0x15, 0xf5, 0x81, 0x7a, 0x3b, 0xfc, 0x44, 0xc9, 0xd2, 0xea, 0x39, 0xf9, 0x39, 0x5a, 0xfb, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x20, 0x4e, 0x3f, 0xbd, 0xfb, 0x06, 0x00, 0x00,
}

func (this *BidID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BidID)
	if !ok {
		that2, ok := that.(BidID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if this.DSeq != that1.DSeq {
		return false
	}
	if this.GSeq != that1.GSeq {
		return false
	}
	if this.OSeq != that1.OSeq {
		return false
	}
	if !bytes.Equal(this.Provider, that1.Provider) {
		return false
	}
	return true
}
func (m *MsgCreateBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCloseBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BidID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BidID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.OSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.GSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.GSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.DSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.BidID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BidFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.OSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.GSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.GSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.DSeq != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBid(dAtA []byte, offset int, v uint64) int {
	offset -= sovBid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovBid(uint64(l))
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovBid(uint64(l))
	return n
}

func (m *MsgCloseBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BidID.Size()
	n += 1 + l + sovBid(uint64(l))
	return n
}

func (m *BidID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovBid(uint64(m.DSeq))
	}
	if m.GSeq != 0 {
		n += 1 + sovBid(uint64(m.GSeq))
	}
	if m.OSeq != 0 {
		n += 1 + sovBid(uint64(m.OSeq))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BidID.Size()
	n += 1 + l + sovBid(uint64(l))
	if m.State != 0 {
		n += 1 + sovBid(uint64(m.State))
	}
	l = m.Price.Size()
	n += 1 + l + sovBid(uint64(l))
	return n
}

func (m *BidFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovBid(uint64(m.DSeq))
	}
	if m.GSeq != 0 {
		n += 1 + sovBid(uint64(m.GSeq))
	}
	if m.OSeq != 0 {
		n += 1 + sovBid(uint64(m.OSeq))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovBid(uint64(m.State))
	}
	return n
}

func sovBid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBid(x uint64) (n int) {
	return sovBid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GSeq", wireType)
			}
			m.GSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSeq", wireType)
			}
			m.OSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Bid_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GSeq", wireType)
			}
			m.GSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSeq", wireType)
			}
			m.OSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Bid_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBid = fmt.Errorf("proto: unexpected end of group")
)
